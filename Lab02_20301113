class Node:
    def __init__(self, e, n):
        self.elem = e
        self.next = n

class LinkedList:

    def __init__(self, a):
        self.head = None #instance variable
        #write your code here
        
        self.size = 0           
        if len(a) != 0:
            
            for i in a:
                node = Node(i, None)
                if self.head is None:
                    self.head = node
                     
                else:
                    n = self.head
                    while n.next != None:
                        n = n.next 
                    n.next = node
                self.size += 1
        else:
            self.head = None
            
            
    def showList(self):
        #write your code here

        if self.head != None:
            n = self.head 
            i = 1
            while n is not None:
                if i != self.size:
                    print(n.elem, end =" -> ")
                else:
                    print(n.elem)
                n = n.next
                i += 1
        elif self.head is  None:
            print("Empty list")

    def isEmpty(self):
        #write your code here
        n = self.head
        if n != None:
            return False
        else:
            return True

    def clear(self):
        #write your code here
        n = self.head 
        while n!= None:
            s = n.next
            n = None 
            n = s
        self.head = n
        
    def insert(self, newElement, index = None):
        #write your code here
        node = Node(newElement, None)
        verify = False
        n = self.head 
        while n!= None:
            if n.elem == newElement: 
                verify = True
                break
            n = n.next 
            
        if verify == False:
            if self.head is None:
                self.head = node
                return
            if index == None:
                fini = self.head 
                while fini.next: 
                    fini = fini.next 
                fini.next = node
                self.size += 1 
                
            elif index != None: 
    
                if index == 0:
                    node.next = self.head 
                    self.head = node
                    self.size += 1 
                else:
                    i = 0
                    n = self.head
                    while i < index-1:
                        n = n.next 
                        i += 1 
                    temp = n.next
                    n.next = node
                    node.next = temp
                    self.size += 1 
        else:
            pass

    def remove(self, deleteKey):
        #write your code here
        
        n = self.head
        
        if n.elem == deleteKey:
            temp = n
            self.head = n.next
            self.size -= 1
            return temp

        while n is not None:
            if n.elem == deleteKey:
                break 
            prev = n
            n = n.next
        self.size -= 1
        if n ==  None:
            return 
        prev.next = n.next 
        
        
    def evenList(self):
        #write your code here 
        self.size = 0
        n = self.head 
        while n != None:
            if n.elem % 2 == 0:
                # temp = self.head 
                self.head = n
                self.head.next = n.next
                # self.head.next = temp.next
                self.size += 1
                break 
            n = n.next
            
        even_head = self.head
        n = self.head.next
        while n!= None:
            if n.elem % 2 == 0:
                even_head.next = n 
                even_head = even_head.next 
                self.size += 1
            n = n.next
            
        return self.head

    def find(self, element):
        n = self.head
        while n != None:
            if n.elem == element:
                return True 
            n = n.next
        return False 

    def reverseList(self):
        #write your code here
        back = None 
        on = self.head
        while on is not None: 
            n = on.next
            on.next = back
            back = on
            on = n
        self.head = back          

    def sort(self):
        #write your code here
        i = 0
        while i < self.size:
            on = self.head 
            n = on.next 
            back = None 
            while n:
                if on.elem > n.elem: 
                    if back == None: 
                        back = on.next 
                        n = n.next 
                        back.next = on 
                        on.next = n 
                        self.head = back 
                    else: 
                        tempo = n 
                        n = n.next 
                        back.next = on.next 
                        back = tempo 
                        tempo.next = on 
                        on.next = n 
                else:
                    back = on 
                    on = n 
                    n = n.next 
            i += 1

    def sum(self):
        #write your code here
        n = self.head 
        sum = 0
        while n != None: 
            sum += n.elem 
            n = n.next
        return sum

    def rotateKTimes(self, k, direction):
        #write your code here
        
        if k == 0:
            return
        
        if direction == "left":
            on = self.head 
            
            c = 1 
            
            while c < k and on is not None:
                on = on.next 
                c += 1
            if on is None:
                return 
            kNode = on 
            
            while on.next is not None:
                on = on.next 
            on.next = self.head 
            self.head = kNode.next 
            kNode.next = None 
    
        elif direction == "right":
            tempo = self.head
            l = 1 
            while tempo.next != None: 
                tempo = tempo.next 
                l += 1
                
            on = self.head 
            k = l - k
            cr = 1 
            while cr < k and on != None:
                on = on.next 
                cr += 1
            if on == None:
                return 
            
            kNode = on 
            
            tempo.next = self.head 
            
            self.head = kNode.next 
            
            kNode.next = None 
            
            return self.head
            

#==========================Tester Code==========================#
        
#Task-2.1, 2.2 -- Constructor & showList
print("\n//=======Task 2.1, 2.2 -- Constructor & showList=======//")
a = [10, 20, 30, 40, 50, 60]
l1 = LinkedList(a) 
l1.showList() #Should print: 10->20->30->40->50->60

#Task-2.3 -- isEmpty
print("\n//========Task 2.3 -- isEmpty========//")
isListEmpty = l1.isEmpty()
print(isListEmpty) #Should print: false
b = []
l2 = LinkedList(b)
isListEmpty = l2.isEmpty()
print(isListEmpty) #Should print: true

#Task-2.4 -- Clear
print("\n//=======Task 2.4 -- Clear =======//")
print("Before clearing Linked List")
l1.showList() #Should print: 10->20->30->40->50->60
l1.clear()
print("After clearing Linked List")
l1.showList() #Should print: Empty List

#Task-2.5, 2.6 -- Insert
print("\n//=======Task 2.5, 2.6 -- Insert=======//")
c = [10, 20, 30, 40, 50, 60, 70, 80, 90]
l3 = LinkedList(c)
l3.showList() #Should print: 10->20->30->40->50->60->70->80->90
l3.insert(100)
l3.showList() #Should print: 10->20->30->40->50->60->70->80->90->100
l3.insert(0, 0)
l3.showList() #Should print: 0->10->20->30->40->50->60->70->80->90->100
l3.insert(110, 5)
l3.showList() #Should print: 0->10->20->30->40->110->50->60->70->80->90->100
l3.insert(120, 12)
l3.showList() #Should print: 0->10->20->30->40->110->50->60->70->80->90->100->120
l3.insert(50) #Should print: Key 50 already exists

#Task-2.7 -- Remove
print("\n//=======Task 2.7 -- Remove=======//")
l3.showList() #Should print: 0->10->20->30->40->110->50->60->70->80->90->100->120
l3.remove(0)
l3.showList() #Should print: 10->20->30->40->110->50->60->70->80->90->100->120
l3.remove(110) 
l3.showList() #Should print: 10->20->30->40->50->60->70->80->90->100->120
l3.remove(120)
l3.showList() #Should print: 10->20->30->40->50->60->70->80->90->100
l3.remove(120) #Should print: Key 120 does not exist

#Task-2.8 -- EvenList
print("\n//=======Task 2.8 -- EvenList =======//")
d = [1, 2, 5, 3, 8]
l4 = LinkedList(d)
l5 = LinkedList(d)
l5.evenList()
l5.showList() #Should print: 2->8

#Task-2.9 -- Find
print("\n//=======Task 2.9 -- Find =======//")
found = l4.find(5)
print(found) #Should print: true
found = l4.find(4)
print(found) #Should print: false

#Task-2.10 -- Reverse List
print("\n//=======Task 2.10 -- Reverse =======//")
print("Before Reverse: ", end='')
l4.showList() #Should print: 1->2->5->3->8
l4.reverseList()
print("After Reverse: ", end='')
l4.showList() #Should print: 8->3->5->2->1

#Task-2.11 -- Sort
print("\n//=======Task 2.11 -- Sort =======//")
print("Before Sort: ", end='')
l4.showList() #Should print: 8->3->5->2->1
l4.sort()
print("After Sort: ", end='')
l4.showList() #Should print: 1->2->3->5->8

#Task-2.12 -- Sum of Elements
print("\n//=======Task 2.12 -- Sum of Elements =======//")
l4.showList() #Should print: 1->2->3->5->8
total = l4.sum()
print("Sum of Elements:", total)

#Task-2.13 -- Rotate
print("\n//=======Task 2.13 -- Rotate =======//")
l4.showList() #Should print: 1->2->3->5->8
l4.rotateKTimes(2, "left")
l4.showList() #Should print: 3->5->8->1->2
l4.rotateKTimes(2, "right")
l4.showList() #Should print: 1->2->3->5->8