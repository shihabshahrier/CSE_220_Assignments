class StackArrey:
    def __init__(self):
        self.arr = [] 
        self.size = 0
        
    def push(self, val):
        
        self.arr.append(val)
        self.size += 1

    def pop(self):
        if self.size == 0:
            raise Exception("Empty")
            
        p_val = self.arr[self.size-1]
        del self.arr[self.size-1]
        
        self.size -= 1
        
        return p_val
    
    def peek(self):
        if self.size == 0:
            return None
            
        p_val = self.arr[self.size-1]
        
        return p_val

def arrExpressionChecker():
    sta1 = StackArrey()
    ex = input()
    
    # ex = "1+2*[3*3+{4–5(6(7/8/9)+10)}–11+(12*8)/{13+13}]+14"
    # ex = "1+2]*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14"
    # ex = "1+2*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14"
    # ex = "1+2*(3/4)"


    for i in range(len(ex)):
        if ex[i] in "({[":
            sta1.push(ex[i]) 
            
        elif ex[i] in "]})":
            if sta1.peek() is None:
                print("This expression is NOT correct.")
                
                if ex[i] == "]":
                    print(f"Error at character # {i+1}. ']'- not opended.")
                    
                elif ex[i] == "}":
                    print(f"Error at character # {i+1}.", " '}' - not opended.")
                    
                elif ex[i] == ")":
                    print(f"Error at character # {i+1}. ')'- not opended.")
                    
                return 
            
            if ex[i] == "]":
                if "[" == sta1.peek():
                    sta1.pop()
      
            elif ex[i] == "}":
                if "{" == sta1.peek():
                    sta1.pop()
     
            elif ex[i] == ")":
                if "(" == sta1.peek():
                    sta1.pop()

    if sta1.size == 0:
        print("This expression is correct.")
    else:
        print("This expression is NOT correct.")
        print(f"Error at character #{ex.index(sta1.peek())+1} . {sta1.peek()}- not closed.")
        
arrExpressionChecker()  

print("#=============================##==========================#")

class Node:
    def __init__(self, elem, next):
        self.elem = elem 
        self.next = next 


class StackList:
    def __init__(self):
        self.head = None
        self.size = 0
    def push(self, val):
        if self.head is None:
            self.head = Node(val, None) 
        else:
            node = Node(val, None)
            node.next = self.head 
            self.head = node 
        self.size += 1   
    def pop(self):
        
        if self.head is None:
            raise Exception("Empty stack")
            
        pop_node = self.head 
        self.head = self.head.next 
        pop_node.next = None 
        
        self.size -= 1
        
        return pop_node.elem 
    
    def peek(self):
        if self.head is None:
            return None
            
        return self.head.elem 

    
def listExpressionChecker():
    sta2 = StackList()
    ex = input()
    
    # ex = "1+2*[3*3+{4–5(6(7/8/9)+10)}–11+(12*8)/{13+13}]+14"
    # ex = "1+2]*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14"
    # ex = "1+2*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14"
    # ex = "1+2*(3/4)"

    for i in range(len(ex)):
        if ex[i] in "({[":
            sta2.push(ex[i])
            
        elif ex[i] in "]})":
        
            if sta2.peek() is None:
                print("This expression is NOT correct.")
                
                if ex[i] == "]":
                    print(f"Error at character # {i+1}. ']'- not opended.")
                    
                elif ex[i] == "}":
                    print(f"Error at character # {i+1}.", " '}' - not opended.")
                    
                elif ex[i] == ")":
                    print(f"Error at character # {i+1}. ')'- not opended.")
                    
                return 
            
            elif ex[i] == "]":
                if "[" == sta2.peek():
                    sta2.pop()
                    

            elif ex[i] == "}":
                if "{" == sta2.peek():
                    sta2.pop()
                    
     
            elif ex[i] == ")":
                if "(" == sta2.peek():
                    sta2.pop()


    if sta2.size == 0:
        print("This expression is correct.")
    else:
        print("This expression is NOT correct.")
        print(f"Error at character #{ex.index(sta2.peek())+1} . {sta2.peek()}- not closed.")
       
listExpressionChecker()  
  